prachi-entity-records : API
prachi-entity-record  : WEB

Why we used node js over other technology (like java,php,.net etc) 

-->Nowadays, Node.js is gaining momentum. The platform uses JavaScript. It’s functional, and its non-blocking I/O mechanism allows for a better performance.
-->So the largest waste with current programming technologies comes from waiting for I/O to complete. There are several ways in which one can deal with the performance impact	

(Just Read)
-->synchronous: you handle one request at a time, each in turn. pros: simple cons: any one request can hold up all the other requests
fork a new process: you start a new process to handle each request. pros: easy cons: does not scale well, hundreds of connections means hundreds of processes. fork() is the Unix programmer's hammer. Because it's available, every problem looks like a nail. It's usually overkill
threads: start a new thread to handle each request. pros: easy, and kinder to the kernel than using fork, since threads usually have much less overhead cons: your machine may not have threads, and threaded programming can get very complicated very fast, with worries about controlling access to shared resources.
-->It really is a single thread running: you can't do any parallel code execution; doing a "sleep" for example will block the server for one second
-->So while that code is running, node.js will not respond to any other requests from clients, since it only has one thread for executing your code. Or if you would have some CPU -intensive code, say, for resizing images, that would still block all other requests.

-->Why is this good? When do we go from sync to async/parallel execution?

Having synchronous execution is good, because it simplifies writing code (compared to threads, where concurrency issues have a tendency to result in WTFs).
In node.js, you aren't supposed to worry about what happens in the backend: just use callbacks when you are doing I/O; and you are guaranteed that your code is never interrupted and that doing I/O will not block other requests without having to incur the costs of thread/process per request (e.g. memory overhead in Apache).

Having asynchronous I/O is good, because I/O is more expensive than most code and we should be doing something better than just waiting for I/O.


How the single threaded non blocking IO model works in Node.js

They are Node.js’s use of single threaded and asynchronous architecture. 

Node.js is server reacts to events and send events (messages) to the database. 

it uses asynchronous I/O and scale well, and hard to use with other technologies.	

Aasynchronous with node js (benifits of it) 

How to initiate node project -- It include package.json (what is package.json,dev-dependancy,how to maintain version of package) 

Why nodejs is process faster then any other server

There are no Inactive QC Form(s).No users under this role. Please select another role to proceed.

